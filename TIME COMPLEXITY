Vector Built-in Functions:

################################# INITIALIZATION ####################################

Time Complexity
(1)vector<type>v;
Construct a vector with 0 elements.
O(1)
*****
(2)vector<type>v(N);
Construct a vector with N elements.
O(N);
******

(3)vector<type>v(N,V);
Construct a vector with N elements and the value will be V.
O(N);
******
(4)vector<type>v(v2);
Construct a vector by copying another vector v2.
O(N);
*******
(5)vector<type>v(A,A+N);
Construct a vector by copying all elements from an array A of size N.
O(N);
********

##################################### CAPACITY ###################################:
	
Time Complexity
(1)v.size()
Returns the size of the vector.
O(1);
*******

(2)v.max_size()
Returns the maximum size that the vector can hold.
O(1);
***********

(3)v.capacity()
Returns the current available capacity of the vector.
O(1);
************

(4)v.clear()
Clears the vector elements. Do not delete the memory, only clear the value.
O(N);
***********

(5)v.empty()
Return true/false if the vector is empty or not.
O(1);
********


(6)v.resize()
Change the size of the vector.
O(K); (where K is the difference between new size and current size)
*******************************************************


############################################### MODIFIERS #####################################

Time Complexity
(1)v= or v.assign()
Assign another vector.
O(N) if sizes are different, O(1) otherwise.
***********

(2)v.push_back()
Add an element to the end.
O(1)

*********

(3)v.pop_back()
Remove the last element.
O(1);
************

(4)v.insert()
Insert elements at a specific position.
O(N+K); where K is the number of elements to be inserted.

**********

(5)v.erase()
Delete elements from a specific position.
O(N+K); where K is the number of elements to be deleted.
************

(6)replace(v.begin(),v.end(),value,replace_value)
Replace all the value with replace_value. Not under a vector.
O(N);
**********
(7)find(v.begin(),v.end(),V)
Find the value V. Not under a vector.
O(N)
*******************************************************


#################################################### Element access #####################################


Time Complexity
(1)v[i]
Access the ith element.
O(1);
***********
(2)v.at(i)
Access the ith element.
O(1);
***************
(3)v.back()
Access the last element.
O(1);

*********
(4)v.front()
Access the first element.
O(1);

***************



##################################### Iterators ##############################

Time Complexity
(1)v.begin()
Pointer to the first element.
O(1);

***********
(2)v.end()
Pointer to the last element.
O(1);
!!!!!!!!!!!!!@@@@@@@@@@@@@@##################$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%^^^^^^^^^&&&&&&&&&************

                                       THE END


